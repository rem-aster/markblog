// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"encore.dev/types/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            users
        WHERE
            username = $1
    ) AS user_exists
`

func (q *Queries) CheckUserExists(ctx context.Context, db DBTX, username string) (bool, error) {
	row := db.QueryRowContext(ctx, checkUserExists, username)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username, password_hash)
VALUES
    ($1, $2)
RETURNING
    id,
    username,
    password_hash,
    created_at,
    updated_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (*User, error) {
	row := db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserActivity = `-- name: GetUserActivity :many
BEGIN
`

type GetUserActivityRow struct {
}

func (q *Queries) GetUserActivity(ctx context.Context, db DBTX) ([]*GetUserActivityRow, error) {
	rows, err := db.QueryContext(ctx, getUserActivity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserActivityRow{}
	for rows.Next() {
		var i GetUserActivityRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id,
    username,
    password_hash,
    created_at,
    updated_at
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, db DBTX, id uuid.UUID) (*User, error) {
	row := db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id,
    username,
    password_hash,
    created_at,
    updated_at
FROM
    users
WHERE
    username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, db DBTX, username string) (*User, error) {
	row := db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

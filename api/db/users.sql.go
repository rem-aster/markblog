// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"

	"encore.dev/types/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            users
        WHERE
            username = $1
    ) AS user_exists
`

func (q *Queries) CheckUserExists(ctx context.Context, db DBTX, username string) (bool, error) {
	row := db.QueryRowContext(ctx, checkUserExists, username)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username, password_hash)
VALUES
    ($1, $2)
RETURNING
    id,
    username,
    password_hash,
    created_at,
    updated_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (*User, error) {
	row := db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLatestUserActivity = `-- name: GetLatestUserActivity :many
WITH user_info AS (
    SELECT id
    FROM users
    WHERE username = $1
)
SELECT
    p.id AS post_id,
    p.content,
    p.created_at AS action_time,
    'post' AS action_type
FROM
    posts p
WHERE
    p.user_id = (SELECT id FROM user_info)
UNION ALL
SELECT
    c.id AS post_id,
    c.content,
    c.created_at AS action_time,
    'comment' AS action_type
FROM
    comments c
WHERE
    c.user_id = (SELECT id FROM user_info)
ORDER BY
    action_time DESC
LIMIT 
    $2
OFFSET 
    $3
`

type GetLatestUserActivityParams struct {
	Username string
	Limit    int32
	Offset   int32
}

type GetLatestUserActivityRow struct {
	PostID     uuid.UUID
	Content    string
	ActionTime time.Time
	ActionType string
}

func (q *Queries) GetLatestUserActivity(ctx context.Context, db DBTX, arg GetLatestUserActivityParams) ([]*GetLatestUserActivityRow, error) {
	rows, err := db.QueryContext(ctx, getLatestUserActivity, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetLatestUserActivityRow{}
	for rows.Next() {
		var i GetLatestUserActivityRow
		if err := rows.Scan(
			&i.PostID,
			&i.Content,
			&i.ActionTime,
			&i.ActionType,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id,
    username,
    password_hash,
    created_at,
    updated_at
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, db DBTX, id uuid.UUID) (*User, error) {
	row := db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id,
    username,
    password_hash,
    created_at,
    updated_at
FROM
    users
WHERE
    username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, db DBTX, username string) (*User, error) {
	row := db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

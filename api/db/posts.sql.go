// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db

import (
	"context"
	"time"

	"encore.dev/types/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO
    posts (user_id, title, content)
VALUES
    ($1, $2, $3)
RETURNING
    id,
    user_id,
    title,
    content,
    created_at,
    updated_at
`

type CreatePostParams struct {
	UserID  uuid.UUID
	Title   string
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, db DBTX, arg CreatePostParams) (*Post, error) {
	row := db.QueryRowContext(ctx, createPost, arg.UserID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLatestPosts = `-- name: GetLatestPosts :many
SELECT
    p.id,
    p.title,
    p.content,
    p.created_at,
    u.username AS author
FROM
    posts p
    JOIN users u ON p.user_id = u.id
ORDER BY
    p.created_at DESC
LIMIT
    $2
OFFSET
    $1
`

type GetLatestPostsParams struct {
	Offset int32
	Limit  int32
}

type GetLatestPostsRow struct {
	ID        uuid.UUID
	Title     string
	Content   string
	CreatedAt time.Time
	Author    string
}

func (q *Queries) GetLatestPosts(ctx context.Context, db DBTX, arg GetLatestPostsParams) ([]*GetLatestPostsRow, error) {
	rows, err := db.QueryContext(ctx, getLatestPosts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetLatestPostsRow{}
	for rows.Next() {
		var i GetLatestPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"
	"time"

	"encore.dev/types/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO
    posts (user_id, content)
VALUES
    ($1, $2)
RETURNING
    id,
    user_id,
    content,
    created_at,
    updated_at
`

type CreatePostParams struct {
	UserID  uuid.UUID
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, db DBTX, arg CreatePostParams) (*Post, error) {
	row := db.QueryRowContext(ctx, createPost, arg.UserID, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLatestPosts = `-- name: GetLatestPosts :many
SELECT 
    p.id,
    p.content,
    p.created_at,
    u.username
FROM 
    posts p
JOIN 
    users u ON p.user_id = u.id
ORDER BY 
    p.created_at DESC
LIMIT 
    $1
OFFSET 
    $2
`

type GetLatestPostsParams struct {
	Limit  int32
	Offset int32
}

type GetLatestPostsRow struct {
	ID        uuid.UUID
	Content   string
	CreatedAt time.Time
	Username  string
}

func (q *Queries) GetLatestPosts(ctx context.Context, db DBTX, arg GetLatestPostsParams) ([]*GetLatestPostsRow, error) {
	rows, err := db.QueryContext(ctx, getLatestPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetLatestPostsRow{}
	for rows.Next() {
		var i GetLatestPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT
    id,
    user_id,
    content,
    created_at,
    updated_at
FROM
    posts
WHERE
    id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, db DBTX, id uuid.UUID) (*Post, error) {
	row := db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

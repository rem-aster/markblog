// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comments.sql

package db

import (
	"context"
	"time"

	"encore.dev/types/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO
    comments (post_id, user_id, content)
VALUES
    ($1, $2, $3)
RETURNING
    id,
    post_id,
    user_id,
    content,
    created_at,
    updated_at
`

type CreateCommentParams struct {
	PostID  uuid.UUID
	UserID  *uuid.UUID
	Content string
}

func (q *Queries) CreateComment(ctx context.Context, db DBTX, arg CreateCommentParams) (*Comment, error) {
	row := db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAllCommentsForPost = `-- name: GetAllCommentsForPost :many
SELECT
    c.id,
    c.content,
    c.created_at,
    u.username AS author
FROM
    comments c
    JOIN users u ON c.user_id = u.id
WHERE
    c.post_id = $1
ORDER BY
    c.created_at ASC
`

type GetAllCommentsForPostRow struct {
	ID        uuid.UUID
	Content   string
	CreatedAt time.Time
	Author    string
}

func (q *Queries) GetAllCommentsForPost(ctx context.Context, db DBTX, postID uuid.UUID) ([]*GetAllCommentsForPostRow, error) {
	rows, err := db.QueryContext(ctx, getAllCommentsForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllCommentsForPostRow{}
	for rows.Next() {
		var i GetAllCommentsForPostRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentbyID = `-- name: GetCommentbyID :one
SELECT
    id,
    post_id,
    user_id,
    content,
    created_at,
    updated_at
FROM
    comments
WHERE
    id = $1
`

func (q *Queries) GetCommentbyID(ctx context.Context, db DBTX, id uuid.UUID) (*Comment, error) {
	row := db.QueryRowContext(ctx, getCommentbyID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
